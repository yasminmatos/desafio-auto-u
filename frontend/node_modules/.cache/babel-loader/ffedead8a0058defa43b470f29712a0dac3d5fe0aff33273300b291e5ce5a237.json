{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yasmin\\\\Documents\\\\Projetos\\\\Desafio Auto U\\\\frontend\\\\src\\\\components\\\\FileUpload.jsx\",\n  _s = $RefreshSig$();\nimport { useDropzone } from \"react-dropzone\";\nimport { Upload, Trash2 } from \"lucide-react\";\nimport { toast } from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FileUpload({\n  uploadedFile,\n  setUploadedFile,\n  clear\n}) {\n  _s();\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop: acceptedFiles => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setUploadedFile(file); // salva o arquivo\n        clear(); // apenas limpa resultado/erro do hook\n      }\n    },\n    accept: {\n      \"text/plain\": [\".txt\"],\n      \"application/pdf\": [\".pdf\"]\n    },\n    maxFiles: 1,\n    onDropRejected: () => {\n      toast.error(\"Formato não suportado. Use apenas .txt ou .pdf\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      className: `dropzone ${isDragActive ? \"active\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropzone-content\",\n        children: [/*#__PURE__*/_jsxDEV(Upload, {\n          size: 48,\n          className: \"upload-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropzone-text\",\n          children: isDragActive ? \"Solte o ficheiro aqui\" : \"Clique ou arraste um ficheiro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropzone-subtext\",\n          children: \"Formatos suportados: .txt, .pdf\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), uploadedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Ficheiro selecionado:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), \" \", uploadedFile.name, \" (\", (uploadedFile.size / 1024).toFixed(1), \" KB)\", /*#__PURE__*/_jsxDEV(Trash2, {\n        size: 16,\n        className: \"clear-file-icon\",\n        onClick: () => setUploadedFile(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUpload, \"YfI2qKQYNDOj7ozxGshQtast5Mk=\", false, function () {\n  return [useDropzone];\n});\n_c = FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["useDropzone","Upload","Trash2","toast","jsxDEV","_jsxDEV","FileUpload","uploadedFile","setUploadedFile","clear","_s","getRootProps","getInputProps","isDragActive","onDrop","acceptedFiles","file","accept","maxFiles","onDropRejected","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","size","name","toFixed","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Yasmin/Documents/Projetos/Desafio Auto U/frontend/src/components/FileUpload.jsx"],"sourcesContent":["import { useDropzone } from \"react-dropzone\";\nimport { Upload, Trash2 } from \"lucide-react\";\nimport { toast } from \"react-hot-toast\";\n\nexport function FileUpload({ uploadedFile, setUploadedFile, clear }) {\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setUploadedFile(file); // salva o arquivo\n        clear(); // apenas limpa resultado/erro do hook\n      }\n    },\n    accept: { \"text/plain\": [\".txt\"], \"application/pdf\": [\".pdf\"] },\n    maxFiles: 1,\n    onDropRejected: () => {\n      toast.error(\"Formato não suportado. Use apenas .txt ou .pdf\");\n    },\n  });\n\n  return (\n    <div>\n      <div {...getRootProps()} className={`dropzone ${isDragActive ? \"active\" : \"\"}`}>\n        <input {...getInputProps()} />\n        <div className=\"dropzone-content\">\n          <Upload size={48} className=\"upload-icon\" />\n          <div className=\"dropzone-text\">\n            {isDragActive ? \"Solte o ficheiro aqui\" : \"Clique ou arraste um ficheiro\"}\n          </div>\n          <div className=\"dropzone-subtext\">Formatos suportados: .txt, .pdf</div>\n        </div>\n      </div>\n\n      {uploadedFile && (\n        <div className=\"file-info\">\n          <strong>Ficheiro selecionado:</strong> {uploadedFile.name} (\n          {(uploadedFile.size / 1024).toFixed(1)} KB)\n          <Trash2\n            size={16}\n            className=\"clear-file-icon\"\n            onClick={() => setUploadedFile(null)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}